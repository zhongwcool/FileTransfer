package com.demo.server;
import java.io.*;
import java.net.*;

/**
 * @author yeeku.H.lee kongyeeku@163.com
 * @version 1.0 <br>
 *          Copyright (C), 2005-2008, yeeku.H.Lee <br>
 *          This program is protected by copyright laws. <br>
 *          Program Name: <br>
 *          Date:
 */
// 负责处理每个线程通信的线程类
public class ServerThread implements Runnable {
	// 定义当前线程所处理的Socket
	Socket currentSocket = null;
	
	// 该线程所处理的Socket所对应的输入流
	BufferedReader bufferedReader = null;

	public ServerThread(Socket socket) throws IOException {
		currentSocket = socket;
		
		// 初始化该Socket对应的输入流
		bufferedReader = new BufferedReader(new InputStreamReader(currentSocket.getInputStream(), "utf-8")); // ②
	}

	public void run() {
		try {
			String content = null;
			
			// 采用循环不断从Socket中读取客户端发送过来的数据
			while ((content = readFromClient()) != null) {
				// 遍历socketList中的每个Socket，
				// 将读到的内容向每个Socket发送一次
				//System.out.println("The Count of Host in Connection: " + MyServer.socketList.size());
				for (Socket s : MyServer.socketList) {
					//System.out.println("Host in Server: " + s.toString() + " " + s.getPort() + " " + s.getLocalPort());
					//OutputStream os = s.getOutputStream();
					PrintWriter pw = new PrintWriter(s.getOutputStream());
					pw.print(content + "\n");
					pw.flush();
					//os.write((content + "\n").getBytes("utf-8"));
					//break;
				}
				System.out.println("The String Client input : " + content);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 定义读取客户端数据的方法
	 * @return
	 */
	private String readFromClient() {
		try {
			return bufferedReader.readLine();
		}catch (IOException e) {	// 如果捕捉到异常，表明该Socket对应的客户端已经关闭
			// 删除该Socket。
			MyServer.socketList.remove(currentSocket);
		}
		return null;
	}
}
